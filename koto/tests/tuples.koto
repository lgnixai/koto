make_foo = |x|
  x: x
  @<: |other| self.x < other.x
  @>: |other| self.x > other.x
  @==: |other| self.x == other.x

@tests =
  @test for_loop: ||
    a = 1, 2, 3
    z = []
    for x in a
      z.push x
    assert_eq z, [1, 2, 3]

  @test contains: ||
    x = 1, 2, 3
    assert (x.contains 2)
    assert not (x.contains 99)

  @test contains_with_overridden_equality_op: ||
    bar = |x|
      x: x
      @==: |other| self.x != other.x # This inverts the usual behaviour of ==

    x = (bar 1), (bar 1)
    assert not x.contains (bar 1)

  @test deep_copy: ||
    a = [1, 2, 3]
    # x contains 3 shared copies of a
    x = (a, a, a)
    # deep_copy creates 3 unique copies of a
    x2 = koto.deep_copy x
    # modifying a is reflected in x, but not x2
    a[0] = 99
    assert_eq x[1][0], 99
    assert_eq x2[0][0], 1
    # modifying one list in x2 doesn't affect the others
    x2[1][0] = 42
    assert_eq x2[0][0], 1

  @test first: ||
    assert_eq (1, 2, 3).first(), 1
    assert_eq [].to_tuple().first(), null

  @test get: ||
    x = 1, 2, 3
    assert_eq (x.get 0), 1
    assert_eq (x.get 2), 3
    assert_eq (x.get 4), null

  @test indexing: ||
    x = 1, 2, 3
    assert_eq x[0], 1
    assert_eq x[2], 3
    assert_eq x[..], x
    assert_eq x[0..2], (1, 2)
    assert_eq x[1..], (2, 3)
    assert_eq x[..=1], (1, 2)

  @test iter: ||
    assert_eq
      (1, 2, 3)
        .each |n| "{n}"
        .to_tuple(),
      ("1", "2", "3")

  @test last: ||
    assert_eq (1, 2, 3).last(), 3
    assert_eq [].to_tuple().last(), null

  @test sort_copy: ||
    assert_eq (3, 1, 2).sort_copy(), (1, 2, 3)
    assert_eq ("tuple", "sort", "copy").sort_copy(), ("copy", "sort", "tuple")

    a = (make_foo(1), make_foo(2), make_foo(3))
    t = (a[2], a[0], a[1])
    r = t.sort_copy()

    assert_ne r, t
    assert_eq r, a


  @test to_list: ||
    assert_eq (1, 2).to_list(), [1, 2]
    assert_eq ((1, 2), (3, 4)).to_list(), [(1, 2), (3, 4)]
