@tests =
  @test assignment: ||
    # Assigning a range to a value
    r = 0..2
    # Ranges can be compared
    assert_eq r, 0..2

    # Ranges are exclusive by default, ..= creates an inclusive range
    r = 0..=2
    assert_eq r.to_list(), [0, 1, 2]

  @test indexing: ||
    # Indexing lists with ranges produces sub-lists
    n = (0..10).to_list()
    assert_eq n[2..5], [2, 3, 4]
    assert_eq n[2..=4], [2, 3, 4]

  @test evaluated_boundaries: ||
    z = |n| n
    x = ((z 10)..=(z 20)).to_tuple()
    y = x[1 + 1..(size x) / 2]
    assert_eq y[0], 12

  @test from_and_to_ranges: ||
    n = (0..=10).to_list()
    assert_eq n[..=2], [0, 1, 2]
    assert_eq n[8..], [8, 9, 10]

  @test empty_range: ||
    n = (0..10).to_list()
    assert_eq n[10..10], []

  @test descending_range: ||
    assert_eq (2..0).to_list(), [2, 1]
    assert_eq (2..=0).to_tuple(), (2, 1, 0)

  @test range_contains: ||
    assert (0..10).contains(5)
    assert not (0..10).contains(15)
    assert not (0..10).contains(-0.5)

    assert not (0..10).contains(10)
    assert (0..=10).contains(10)

    assert (10..=0).contains(10)
    assert (10..=0).contains(5)
    assert (10..=0).contains(0)
    assert not (10..=0).contains(10.5)
    assert not (10..=0).contains(-0.5)

    assert (0..10).contains(3..7)
    assert not (0..10).contains(-1..10)
    assert not (0..10).contains(1..11)
    assert not (0..10).contains(10..1)
    assert (0..=10).contains(10..1)

  @test range_expanded: ||
    x = 10..20
    assert_eq x.expanded(5), 5..25
    assert_eq x.expanded(-1), 11..19

  @test range_expanded_descending: ||
    x = 10..0
    assert_eq x.expanded(5), 15..-5
    assert_eq x.expanded(-5), 5..5

  @test range_size: ||
    assert_eq size(0..10), 10
    assert_eq size(0..=10), 11

  @test range_start_end: ||
    x = 10..20
    assert_eq x.start(), 10
    assert_eq x.end(), 20

    assert_eq (10..=20).end(), 20

  @test range_union: ||
    x = 10..20

    assert_eq x.union(5), 5..20
    assert_eq x.union(15), 10..20
    assert_eq x.union(25), 10..26

    assert_eq x.union(1..15), 1..20
    assert_eq x.union(12..100), 10..100
    assert_eq x.union(5..=2), 2..20
    assert_eq x.union(25..=5), 5..26

  @test range_union_descending: ||
    x = 10..0

    assert_eq x.union(-5), 10..-6
    assert_eq x.union(5), 10..0
    assert_eq x.union(15), 15..0

    assert_eq x.union(1..=15), 15..0
    assert_eq x.union(5..=100), 100..0
    assert_eq x.union(-5..=25), 25..-5
    assert_eq x.union(99..0), 99..0
