@tests =
  @test square: ||
    square = |x| x * x
    assert_eq (square 7), 49
    assert_eq (square -10), 100

  @test sum: ||
    sum = |x, y| x + y
    # Call with parentheses
    result = sum(10, 11)
    assert_eq result, 21
    # Call without parentheses
    result = sum 12, 18
    assert_eq result, 30

  @test sum_variadic: ||
    sum = |x, y, z...|
      if z
        x + y + z.fold 0, |a, b| a + b
      else
        x + y
    assert_eq (sum 1, 2), 3
    assert_eq (sum 3, 4, 5), 12
    assert_eq (sum 6, 7, 8, 9), 30

  @test wildcard_arg: ||
    foo = |a, _, c, _ignored| a + c
    assert_eq (foo 1, 0, 3, 99), 4

  @test unpacking_with_ellipses: ||
    foo = |(others_a..., last), (first, others_b...)|
      others_a.sum() * last + first * others_b.sum()
    assert_eq (foo [1, 2, 3, 10], (100, 1, 2, 3)), 660

  @test nested_unpacking: ||
    foo = |a, (b, (c, d)), e|
      a + b + c + d + e
    assert_eq (foo 1, [2, (3, 4)], 5), 15

  @test missing_args_set_to_empty: ||
    foo = |a, b|
      a = a or 100
      b = b or 42
      a + b

    assert_eq foo(), 142
    assert_eq foo(1), 43
    assert_eq foo(1, 2), 3

  @test nested_function: ||
    add = |x, y|
      x2 = x
      do_add = |x, y|
        x = x + y # Nested trailing comment
        x # implicit return of last expression
      result = do_add x, y
      # function arguments are locally scoped
      assert_eq x, x2
      result # implicit return
    assert_eq (add 1, 2), 3

  @test captured_function: ||
    add = |x, y| x + y
    add2 = |x, y| add x, y
    assert_eq (add2 90, 9), 99

  @test nested_calls: ||
    add = |x, y| x + y
    assert_eq (add (add 1, 1), (add -1, -1)), 0

  @test piped_calls: ||
    add = |x, y| x + y
    multiply = |x, y| x * y
    square = |x| x * x

    # Piping can help with making long call chains more readable
    x = multiply 2, square add 1, 3
    y = 3 -> add 1 -> square -> multiply 2
    assert_eq x, y
    assert_eq y, 32

  @test function_returning_multiple_values: ||
    f = |x| x - 1, x + 1
    a, b = f 0
    assert_eq a, -1
    assert_eq b, 1

  @test early_return: ||
    match_digit = |n|
      match_digit_nested = |n|
        for i in 0..10
          if i == n
            return i

      for i in 0..10
        if i == n
          return match_digit_nested n

    assert_eq
      (0..3)
        .each |i| match_digit i
        .to_tuple(),
      (0, 1, 2)

  @test return_multiple_values: ||
    f = ||
      if true
        return -1, 1
    a, b = f()
    assert_eq a, -1
    assert_eq b, 1

  @test return_no_value: ||
    f = ||
      if true
        return
      assert false
    f()
