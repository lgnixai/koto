make_foo = |x|
  x: x
  @<: |other| self.x < other.x
  @>: |other| self.x > other.x
  @==: |other| self.x == other.x

@tests =
  @test clear: ||
    x = [1, 2, 3, 4, 5]
    x.clear()
    assert_eq x, []

  @test contains: ||
    x = (0..10).to_list()
    assert x.contains 5
    assert not x.contains 15

  @test contains_with_overridden_equality_op: ||
    bar = |x|
      x: x
      @==: |other| self.x != other.x # This inverts the usual behaviour of ==

    assert not [(bar 1)].contains (bar 1)

  @test extend: ||
    x = [1, 2, 3]
    x.extend [10, 20, 30]
    assert_eq x[5], 30
    x.extend 'abc'
    assert_eq x[8], 'c'
    x.extend (-1, -2, -3)
    assert_eq x[11], -3

  @test push_pop: ||
    z = [1]
    z.push 2
    assert_eq z, [1, 2]
    # list ops are also available in the list module
    list.push z, 3
    assert_eq z, [1, 2, 3]
    assert_eq z.pop(), 3
    assert_eq z, [1, 2]
    z.pop()
    z.pop()
    assert_eq z, []
    list.pop z
    assert_eq z, []

  @test first_last: ||
    z = []
    assert_eq z.first(), null
    assert_eq z.last(), null

    z = [99]
    assert_eq z.first(), 99
    assert_eq z.last(), 99

    z = [1, 2, 3]
    assert_eq z.first(), 1
    assert_eq z.last(), 3

  @test is_empty: ||
    assert [].is_empty()
    assert not [1, 2, 3].is_empty()

  @test remove_insert: ||
    z = [1, 2, 3]
    assert_eq (z.remove 1), 2
    assert_eq z, [1, 3]
    z.insert 1, 42
    assert_eq z, [1, 42, 3]
    z.insert 3, -1
    assert_eq z, [1, 42, 3, -1]

  @test get: ||
    x = (0..10).to_list()
    assert_eq (x.get 5), 5
    assert_eq (x.get 15), null
    assert_eq (x.get -1), null

  @test fill: ||
    a = [1, 2, 3]
    a.fill 42
    assert_eq a, [42, 42, 42]

  @test resize: ||
    z = [42]
    z.resize 4
    assert_eq z, [42, null, null, null]
    z.resize 2
    assert_eq z, [42, null]
    z.resize 4, 99
    assert_eq z, [42, null, 99, 99]
    z.resize 2, -1
    assert_eq z, [42, null]

  @test resize_with: ||
    z = [42]
    new_entries = (1, 2, 3).iter()
    z.resize_with 4, || new_entries.next().get()
    assert_eq z, [42, 1, 2, 3]
    z.resize_with 2, || 99
    assert_eq z, [42, 1]

  @test retain_value: ||
    z = ["hello", 42, "goodbye", "hello"]
    z.retain "hello"
    assert_eq z, ["hello", "hello"]

  @test retain_predicate: ||
    z = (0..10).to_list()
    z.retain |n| n % 2 == 0
    assert_eq z, [0, 2, 4, 6, 8]

  @test retain_with_overridden_equality_op: ||
    bar = |x|
      x: x
      @==: |other| self.x != other.x # This inverts the usual behaviour of ==

    z = [bar(0), bar(1), bar(1), bar(1), bar(2)]
    z.retain bar(1) # The inverted == operator causes the 'bar 1's to be dropped
    assert_eq (size z), 2

  @test reverse: ||
    a = [1, 2, 3]
    a.reverse()
    assert_eq a, [3, 2, 1]

  @test sort: ||
    z = [3, 2, 1]
    z.sort()
    assert_eq z, [1, 2, 3]

    # Sorting with a key function
    z = [3, 2, 1, 2]
    z.sort |n| -n # reverse sorting
    assert_eq z, [3, 2, 2, 1]

    # Sorting with a core op
    z = [[4, 5, 6], [1], [2, 3]]
    z.sort size
    assert_eq z, [[1], [2, 3], [4, 5, 6]]

    # values with overridden operators
    a = [make_foo(1), make_foo(2), make_foo(2), make_foo(3)]
    z = [a[3], a[1], a[0], a[2]] # 3, 2, 1, 2
    z.sort()

    assert_eq z, a

    z = [a[3], a[1], a[0], a[2]] # 3, 2, 1, 2
    z.sort |n| -n.x # reverse sorting

    a_last = (size a) - 1
    for n in 0..(size z)
      assert_eq z[n].x, a[a_last - n].x

  @test swap: ||
    a = [1, 2, 3]
    b = [7, 8, 9]

    a.swap b

    assert_eq a, [7, 8, 9]
    assert_eq b, [1, 2, 3]

  @test to_tuple: ||
    assert_eq [1, 2, 3].to_tuple(), (1, 2, 3)

  @test transform: ||
    z = ["1", "2", "3"]
    z.transform |x| x.to_number()
    assert_eq z, [1, 2, 3]
