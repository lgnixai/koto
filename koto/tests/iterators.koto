make_foo = |x|
  x: x
  @<: |other| self.x < other.x
  @>: |other| self.x > other.x
  @==: |other| self.x == other.x

@tests =
  @test next: ||
    i = (1..=3).iter()
    assert_eq i.next().get(), 1
    assert_eq i.next().get(), 2
    assert_eq i.next().get(), 3
    assert_eq i.next(), null

  @test next_back: ||
    i = (1..=5).iter()
    assert_eq i.next_back().get(), 5
    assert_eq i.next_back().get(), 4
    assert_eq i.next().get(), 1
    assert_eq i.next_back().get(), 3
    assert_eq i.next_back().get(), 2
    assert_eq i.next_back(), null

  @test to_list: ||
    assert_eq (1..=3).to_list(), [1, 2, 3]
    assert_eq [2, 4, 6].to_list(), [2, 4, 6]
    assert_eq
      {foo: 42, bar: 99}.to_list(),
      [("foo", 42), ("bar", 99)]

    doubler = |xs|
      for x in xs
        yield x * 2
    assert_eq (doubler 1..=5).to_list(), [2, 4, 6, 8, 10]

  @test to_map: ||
    # An iterator that returns a single value produces a Map that contains the
    # input values as keys, and Empty as their associated values.
    assert_eq
      ("1", "2", "3").to_map(),
      {"1": (), "2": (), "3": ()}

    # An iterator that returns a pair of values produces produces a Map where
    # each output pair is inserted as a key/value pair.
    assert_eq
      1..=3
        .each |n| "entry {n}", n
        .to_map(),
      {"entry 1": 1, "entry 2": 2, "entry 3": 3}

    try
      # Only immutable values can be used as keys
      x = [[1, 2, 3], [4, 5, 6]].to_map()
    catch _
      error_caught = true
    assert error_caught

  @test to_string: ||
    assert_eq ("a", "b", "c").to_string(), "abc"
    assert_eq ("a:", 1, " b:", 2).to_string(), "a:1 b:2"

  @test to_tuple: ||
    assert_eq (1..=3).to_tuple(), (1, 2, 3)
    assert_eq [2, 4, 6].to_tuple(), (2, 4, 6)
    assert_eq
      {foo: 42, bar: 99}.to_tuple(),
      (("foo", 42), ("bar", 99))

  @test all: ||
    assert (1..10).all |n| n < 10
    assert not (1..10).all |n| n < 5
    assert "xyz".all |c| "zyx".contains c

  @test any: ||
    assert (1..10).any |n| n == 5
    assert not (1..10).any |n| n == 15
    assert "xyz".any |c| c == "z"

  @test chain: ||
    assert_eq
      (1..10).chain(10..15).chain(15..20).to_tuple(),
      (1..20).to_tuple()

  @test chunks: ||
    assert_eq
      (0..=10).chunks(3).each(iterator.to_tuple).to_tuple(),
      ((0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10))
    assert_eq (0..0).chunks(5).count(), 0

  @test consume: ||
    x = []
    (1..=5).each(|n| x.push n).consume()
    assert_eq x, [1, 2, 3, 4, 5]

    # iter.each(f).consume() is equivalent to iter.consume(f)
    x = []
    (6..=10).consume |n| x.push n
    assert_eq x, [6, 7, 8, 9, 10]

  @test copy: ||
    x = (1..10).iter()
    y = x # x and y share the same iteration count
    z = copy x # z gets a unique iteration count, starting from where x's current count
    assert_eq x.next().get(), 1
    assert_eq x.next().get(), 2
    assert_eq y.next().get(), 3
    assert_eq y.next().get(), 4
    assert_eq z.next().get(), 1
    assert_eq z.next().get(), 2

  @test count: ||
    result = 0..10
      .keep |n| n % 2 == 0
      .count()
    assert_eq result, 5

  @test cycle: ||
    result = 1..=3
      .cycle()
      .take(10)
      .to_list()
    assert_eq result, [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]

  @test each: ||
    assert_eq
      ("1", "2").each(|x| x.to_number()).to_tuple(),
      (1, 2)

    assert_eq
      {foo: 42, bar: 99}
        .each |(key, value)| key, value
        .to_tuple(),
      (("foo", 42), ("bar", 99))

  @test enumerate: ||
    assert_eq
      (10..=12).enumerate().to_tuple(),
      ((0, 10), (1, 11), (2, 12))

  @test find: ||
    assert_eq (1..10).find(|n| n > 4 and n < 6), 5
    assert_eq "heyNow".find(|c| c.to_uppercase() == c), "N"

  @test flatten: ||
    assert_eq [[1, 2, 3], {}, (4, [5, 6])].flatten().to_tuple(), (1, 2, 3, 4, [5, 6])
    assert_eq (("a", "b", "c"), [], ("x", "y", "z")).flatten().to_string(), "abcxyz"

  @test fold: ||
    assert_eq (1..=5).fold(0, |sum, x| sum + x), 15

  @test generate: ||
    from iterator import generate
    state = {x: 0}
    f = || state.x += 1
    assert_eq generate(f).take(3).to_tuple(), (1, 2, 3)
    assert_eq generate(5, f).to_tuple(), (4, 5, 6, 7, 8)

  @test intersperse: ||
    assert_eq ("a", "b", "c").intersperse("-").to_string(), "a-b-c"
    assert_eq (true, "x", false).intersperse(-1).to_tuple(), (true, -1, "x", -1, false)

    # A function can also be used to provide a calculated separator
    separators = ("! ", "? ").iter()
    assert_eq
      ("a", "b", "c")
        .intersperse || separators.next().get()
        .to_string(),
      "a! b? c"

  @test keep: ||
    assert_eq
      0..10
        .keep |x| x % 2 == 1
        .to_tuple(),
      (1, 3, 5, 7, 9)

  @test last: ||
    assert_eq (101..101).take(5).last(), null
    assert_eq (101..1000).take(5).last(), 105

  @test max: ||
    assert_eq (2, -1, 9).max(), 9
    assert_eq (make_foo(2), make_foo(-1), make_foo(9)).max().x, 9
    assert_eq ("hello", "goodbye").max(), "hello"

    # A key function can be used to convert values before the max comparison is performed
    x = {foo: 42, bar: 99}
    assert_eq x.max(|(key, value)| value), ("bar", 99)

    x = [[1], [2, 3], [4, 5, 6]]
    assert_eq x.max(size), [4, 5, 6]

  @test min: ||
    assert_eq (2, -1, 9).min(), -1
    assert_eq (make_foo(2), make_foo(-1), make_foo(9)).min().x, -1
    assert_eq ("hello", "goodbye").min(), "goodbye"

    # A key function can be used to convert values before the max comparison is performed
    x = {foo: 42, bar: 99}
    assert_eq x.min(|(key, value)| value), ("foo", 42)

    x = [[1], [2, 3], [4, 5, 6]]
    assert_eq x.min(size), [1]

  @test min_max: ||
    assert_eq (2, -1, 9).min_max(), (-1, 9)
    assert_eq ("hello", "to the", "world").min_max(), ("hello", "world")
    min_max = (make_foo(2), make_foo(-1), make_foo(9)).min_max()
    assert_eq (min_max[0].x, min_max[1].x), (-1, 9)

    x = {foo: 42, bar: 99, baz: -1}
    assert_eq x.min_max(|(key, value)| value), (("baz", -1), ("bar", 99))

    x = [[1], [2, 3], [4, 5, 6]]
    assert_eq x.min_max(size), ([1], [4, 5, 6])

  @test peekable: ||
    i = 'abcde'.peekable()
    assert_eq i.peek().get(), 'a'
    assert_eq i.next().get(), 'a'
    assert_eq i.peek_back().get(), 'e'
    assert_eq i.next_back().get(), 'e'
    assert_eq i.peek_back().get(), 'd'
    assert_eq i.peek().get(), 'b'
    assert_eq i.to_tuple(), ('b', 'c', 'd')

  @test position: ||
    assert_eq
      (100..1000).position(|x| x >= 110),
      10
    assert_eq
      "hey now".position(|c| c == " "),
      3

  @test product: ||
    assert_eq (1..=5).product(), 120
    # An initial value can be provided to override the default initial value of 1
    assert_eq (2, 3, 4).product(10), 240

  @test product_with_overridden_multiply_operator: ||
    foo = |x|
      x: x
      @*: |other| foo self.x * other.x
    foos = (foo 2), (foo 3), (foo 4)
    assert_eq foos.product(foo 1), (foo 24)

  @test repeat: ||
    from iterator import repeat
    assert_eq repeat(99).take(3).to_tuple(), (99, 99, 99)
    assert_eq repeat(42, 3).to_tuple(), (42, 42, 42)

  @test reversed: ||
    assert_eq (1..=5).reversed().to_tuple(), (5, 4, 3, 2, 1)
    assert_eq [2, 4, 6, 8].reversed().to_tuple(), (8, 6, 4, 2)
    assert_eq (1, 3, 5, 7).reversed().to_tuple(), (7, 5, 3, 1)
    assert_eq {foo: 42, bar: 99}.reversed().to_tuple(), (('bar', 99), ('foo', 42))
    assert_eq "Héllö".reversed().to_tuple(), ('ö', 'l', 'l', 'é', 'H')
    assert_eq "Héllö".reversed().next_back().get(), 'H'

  @test skip: ||
    assert_eq
      (0..10).skip(5).to_tuple(),
      (5, 6, 7, 8, 9)

  @test step: ||
    assert_eq
      (0..10).step(3).to_tuple(),
      (0, 3, 6, 9)
    assert_eq
      'abcdef'.step(2).to_string(),
      'ace'

  @test sum: ||
    assert_eq (1..=5).sum(), 15
    # An initial value can be provided to override the default initial value of 0
    assert_eq (1, 2, 3).sum(100), 106

  @test sum_with_overridden_add_operator: ||
    foo = |x|
      x: x
      @+: |other| foo self.x + other.x
    foos = (foo 10), (foo 20), (foo 30)
    assert_eq foos.sum(foo 0), (foo 60)

  @test take_with_count: ||
    assert_eq
      (1..100).take(5).to_tuple(),
      (1, 2, 3, 4, 5)

    ones = ||
      loop
        yield 1
    assert_eq
      ones().take(3).to_tuple(),
      (1, 1, 1)

  @test take_with_predicate: ||
    assert_eq
      (1..100).take(|n| n <= 5).to_tuple(),
      (1, 2, 3, 4, 5)

    counter = ||
      n = 0
      loop
        yield n += 1
    assert_eq
      counter().take(|n| n <= 3).to_tuple(),
      (1, 2, 3)

  @test windows: ||
    from iterator import to_tuple

    assert_eq
      (1..=5).windows(3).each(to_tuple).to_tuple(),
      ((1, 2, 3), (2, 3, 4), (3, 4, 5))

    # If there aren't enough values in the input, then no windows are produced.
    assert_eq (1, 2).windows(3).count(), 0

  @test zip: ||
    assert_eq
      1..=3
        .zip 11..100
        .to_tuple(),
      ((1, 11), (2, 12), (3, 13))

    assert_eq
      {foo: 42, bar: 99}
        .zip 100..200
        .to_tuple(),
      ((("foo", 42), 100), (("bar", 99), 101))

  @test custom_iterator_adaptor: ||
    # Inserting a function into the iterator map makes it available as an iterator adaptor
    iterator.every_other = ||
      n = 0
      for output in self
        if n % 2 == 0 then yield output
        n += 1

    # As an adaptor for an iterable
    assert_eq
      (1..=5).every_other().to_tuple(),
      (1, 3, 5)

    # As an adaptor in an adaptor chain
    assert_eq
      (10..15).each(|x| '{x}').every_other().to_tuple(),
      ('10', '12', '14')
