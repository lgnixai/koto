import color

assert_color_near = |a, b|
  allowed_error = 1.0e-3
  assert_near a.r(), b.r(), allowed_error
  assert_near a.g(), b.g(), allowed_error
  assert_near a.b(), b.b(), allowed_error
  assert_near a.a(), b.a(), allowed_error

@tests =
  @test rgb: ||
    assert_eq (color 1, 0, 1), (color.rgb 1, 0, 1)
    assert_eq (color 0, 0.5, 0.9), (color.rgb 0, 0.5, 0.9)

  @test rgba: ||
    assert_eq (color 1, 0, 1, 0.5), (color.rgba 1, 0, 1, 0.5)
    assert_eq (color 0, 0.5, 0.9, 0.1), (color.rgba 0, 0.5, 0.9, 0.1)
    assert_eq (color.rgb 0.1, 0.2, 0.3), (color.rgba 0.1, 0.2, 0.3, 1)

  @test hsl: ||
    assert_color_near (color.hsl 0.0, 1.0, 0.5), (color.rgb 1.0, 0.0, 0.0)
    assert_color_near (color.hsl 270, 1.0, 0.5), (color.rgb 0.5, 0.0, 1.0)
    assert_color_near (color.hsl 270, 1.0, 0.8), (color.rgb 0.8, 0.6, 1.0)

  @test hsv: ||
    assert_color_near (color.hsv 180, 0.5, 1.0), (color.rgb 0.5, 1.0, 1.0)
    assert_color_near (color.hsv 180, 1.0, 1.0), (color.rgb 0.0, 1.0, 1.0)
    assert_color_near (color.hsv 270, 1.0, 1.0), (color.rgb 0.5, 0.0, 1.0)

  @test named: ||
    assert_eq (color 'blue'), (color.named 'blue')
    assert_eq (color 'red'), (color.rgb 1, 0, 0)

  @test components: ||
    allowed_error = 1.0e-3
    c = color 'firebrick'
    assert_near c.red(), 0.698, allowed_error
    assert_near c.r(), 0.698, allowed_error
    assert_near c.green(), 0.133, allowed_error
    assert_near c.g(), 0.133, allowed_error
    assert_near c.blue(), 0.133, allowed_error
    assert_near c.b(), 0.133, allowed_error
    assert_near c.alpha(), 1.0, allowed_error
    assert_near c.a(), 1.0, allowed_error

  @test set_components: ||
    c = color('yellow')
      .set_red 0.4
      .set_green 0.9
      .set_blue 0.7
      .set_alpha 0.2
    assert_eq c, color.rgba 0.4, 0.9, 0.7, 0.2
    c
      .set_r 0.9
      .set_g 0.1
      .set_b 0.4
      .set_a 0.3
    assert_eq c, color.rgba 0.9, 0.1, 0.4, 0.3

  @test mix: ||
    a = color 'red'
    b = color 'blue'
    assert_eq a.mix(b), color.rgba 0.5, 0.0, 0.5, 1.0
    assert_eq a.mix(b, 0.25), color.rgba 0.75, 0.0, 0.25, 1.0
    assert_eq a.mix(b, 0.75), color.rgba 0.25, 0.0, 0.75, 1.0

  @test arithmetic: ||
    assert_eq color('red') + color('blue'), color 'fuchsia'
    c = color 'black'
    c += 0.5
    assert_eq c, (color 0.5, 0.5, 0.5)

  @test index: ||
    assert_eq (color 'blue')[1], 0
    assert_eq (color 'blue')[2], 1

  @test iterator: ||
    assert_eq (color 'blue').to_tuple(), (0, 0, 1, 1)

    r, g, b, a = color 'red'
    assert_eq (r, g, b, a), (1, 0, 0, 1)
