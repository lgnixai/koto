@tests =
  @pre_test: ||
    # random.seed seeds the default generator
    random.seed 1

  @test bool: ||
    assert random.bool()
    assert not random.bool()

  @test number: ||
    assert_near random.number(), 0.402, 0.001
    assert_near random.number(), 0.080, 0.001

  @test pick_list: ||
    x = ["foo", "bar", "baz"]
    assert x.contains random.pick x

  @test pick_map: ||
    x = {foo: 123, bar: 456, baz: 789}
    key, value = random.pick x
    assert_eq (x.get key), value

  @test pick_range: ||
    x = 0..10
    assert x.contains random.pick x

  @test pick_tuple: ||
    x = ("foo", "bar", "baz")
    assert x.contains random.pick x

  @test pick_map_with_index: ||
    m =
      data: (10, 20, 30)
      @[]: |i| self.data[i]
      @size: || size self.data

    assert m.data.contains random.pick m

  @test generator: ||
    get_rng_output = |rng|
      0..10
        .each |_| rng.pick 0..5
        .to_tuple()

    rng1 = random.generator 0
    rng2 = random.generator 0
    rng3 = random.generator 99

    output1 = get_rng_output rng1

    assert_eq output1, get_rng_output rng2
    assert_ne output1, get_rng_output rng3

    # seed can be used to reseed the unique generator
    rng3.seed 0
    assert_eq output1, get_rng_output rng3
