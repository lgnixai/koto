from geometry import vec2
from number import pi

@tests =
  @test vec2: ||
    assert_eq vec2(), (vec2 0)
    assert_eq (vec2 1), (vec2 1, 0)
    assert_eq (vec2 vec2 1, 2), (vec2 1, 2)

  @test angle: ||
    assert_eq (vec2 0, 0).angle(), pi
    assert_eq (vec2 1, 0).angle(), 0
    assert_eq (vec2 0, 1).angle(), pi / 2
    assert_eq (vec2 0, -1).angle(), -pi / 2

  @test length: ||
    assert_eq (vec2 0, 0).length(), 0
    assert_eq (vec2 3, 4).length(), 5
    assert_eq (vec2 -3, -4).length(), 5

  @test add: ||
    assert_eq (vec2 2, 3) + (vec2 5, 6), vec2 7, 9
    assert_eq (vec2 2, 3) + 100, vec2 102, 103

  @test subtract: ||
    assert_eq (vec2 2, 3) - (vec2 5, 6), vec2 -3, -3
    assert_eq (vec2 2, 3) - 100, vec2 -98, -97

  @test multiply: ||
    assert_eq (vec2 2, 3) * (vec2 5, 6), vec2 10, 18
    assert_eq (vec2 2, 3) * 100, vec2 200, 300

  @test divide: ||
    assert_eq (vec2 2, 3) / (vec2 5, 6), vec2 0.4, 0.5
    assert_eq (vec2 2, 3) / 100, vec2 0.02, 0.03

  @test negate: ||
    assert_eq -(vec2 2, 3), (vec2 -2, -3)
    assert_eq -(vec2 -3, 4), (vec2 3, -4)

  @test equality: ||
    assert_eq (vec2 2, 3), (vec2 2, 3)
    assert_ne (vec2 2, 3), (vec2 2, 1)

  @test index: ||
    assert_eq (vec2 1, 2)[0], 1
    assert_eq (vec2 5, 6)[1], 6
    x, y = vec2 10, 11
    assert_eq (x, y), (10, 11)
