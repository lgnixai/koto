from number import e, infinity, negative_infinity, pi, pi_2, pi_4, tau

@tests =
  @test abs: ||
    assert_eq -1.abs(), 1
    assert_eq 3.abs(), 3
    assert_eq -1.5.abs(), 1.5
    assert_eq 9.1.abs(), 9.1

  @test acos: ||
    assert_eq 0.acos(), pi_2
    assert_eq 1.acos(), 0

  @test acosh: ||
    assert 0.acosh().is_nan()
    assert_eq 1.acosh(), 0
    assert_near 2.acosh(), 1.31696, 1e-5

  @test and_: ||
    assert_eq (0b10101.and 0b00111), 0b00101
    assert_eq (-1.and 1), 1

  @test asin: ||
    assert_eq 0.asin(), 0
    assert_eq 1.asin(), pi_2

  @test asinh: ||
    assert_near -1.asinh(), -0.88137, 1e-5
    assert_eq 0.asinh(), 0
    assert_near 1.asinh(), 0.88137, 1e-5

  @test atan: ||
    assert_eq 0.atan(), 0
    assert_eq 1.atan(), pi_4

  @test atanh: ||
    assert_eq -1.atanh(), negative_infinity
    assert_eq 0.atanh(), 0
    assert_eq 1.atanh(), infinity

  @test atan2: ||
    assert_eq 1.atan2(0), pi_2
    assert_eq 1.atan2(1), pi_4
    assert_eq 1.atan2(-1), pi - pi_4
    assert_eq -1.atan2(-1), pi_4 - pi

  @test ceil: ||
    assert_eq 0.ceil(), 0
    assert_eq 0.5.ceil(), 1
    assert_eq 1.ceil(), 1

  @test clamp: ||
    assert_eq (0.clamp 1, 2), 1
    assert_eq (1.5.clamp 1, 2), 1.5
    assert_eq (3.clamp 1, 2), 2

  @test cos: ||
    assert_eq 0.cos(), 1
    assert_near pi_2.cos(), 0

  @test cosh: ||
    assert_eq 0.cosh(), 1
    assert_near 1.cosh(), ((1 + e.pow(2)) / (2 * e))

  @test degrees: ||
    assert_eq 0.degrees(), 0
    assert_eq pi_4.degrees(), 45
    assert_eq pi_2.degrees(), 90
    assert_eq pi.degrees(), 180
    assert_eq tau.degrees(), 360

  @test exp: ||
    assert_eq 0.exp(), 1
    assert_eq 1.exp(), e

  @test exp2: ||
    assert_eq 0.exp2(), 1
    assert_eq 2.exp2(), 4

  @test flip_bits: ||
    assert_eq -1.flip_bits(), 0
    assert_eq 0.flip_bits(), -1
    assert_eq 8.flip_bits(), -9

  @test floor: ||
    assert_eq 1.5.floor(), 1
    assert_eq -1.2.floor(), -2

  @test is_nan: ||
    assert not 0.is_nan()
    assert (0 / 0).is_nan()

  @test lerp: ||
    assert_eq 100.lerp(200, 0.5), 150
    assert_eq -1.lerp(-2, 0.75), -1.75

  @test ln: ||
    assert_eq 0.ln(), negative_infinity
    assert_eq 1.ln(), 0
    assert_eq e.ln(), 1

  @test log2: ||
    assert_eq 0.log2(), negative_infinity
    assert_eq 256.log2(), 8

  @test log10: ||
    assert_eq 0.log10(), negative_infinity
    assert_eq 100.log10(), 2

  @test max: ||
    assert_eq (1.5.max 2), 2

  @test min: ||
    assert_eq (1.min 2), 1

  @test or_: ||
    assert_eq (0b10101.or 0b01010), 0b11111
    assert_eq (-1.or 1), -1

  @test pow: ||
    assert_eq (2.pow 8), 256
    assert_eq (4.pow 1.5), 8

  @test radians: ||
    assert_eq 0.radians(), 0
    assert_eq 180.radians(), pi
    assert_eq 360.radians(), tau

  @test recip: ||
    assert_eq -2.recip(), -0.5
    assert_eq 0.recip(), infinity
    assert_eq 2.recip(), 0.5
    assert_eq 4.recip(), 0.25

  @test round: ||
    assert_eq 1.5.round(), 2
    assert_eq -1.2.round(), -1
    assert_eq -2.5.round(), -3

  @test shift_left: ||
    assert_eq 0b10101.shift_left(1), 0b101010
    assert_eq 2.shift_left(3), 16

  @test shift_right: ||
    assert_eq 0b10101.shift_right(1), 0b1010
    assert_eq 256.shift_right(3), 32

  @test sin: ||
    assert_near 0.sin(), 0
    assert_eq pi_2.sin(), 1

  @test sinh: ||
    assert_near 0.sinh(), 0
    assert_near 1.sinh(), ((e.pow(2) - 1) / (2 * e))

  @test sqrt: ||
    assert_eq 64.sqrt(), 8
    assert -1.sqrt().is_nan()

  @test tan: ||
    assert_near pi_4.tan(), 1
    assert_eq 0.tan(), 0
    assert_near 1.tan(), (1.sin() / 1.cos())

  @test tanh: ||
    assert_eq 0.tanh(), 0
    assert_eq 1.tanh(), (1.sinh() / 1.cosh())

  @test to_int: ||
    x = 1.0
    assert_eq x.to_int(), x
    assert_eq 1.1.to_int(), 1
    assert_eq 1.9.to_int(), 1

  @test xor: ||
    assert_eq (0b10101.xor 0b01011), 0b11110
    assert_eq (-1.xor 1), -2
    assert_eq (-1.5.xor 1.1), -2
