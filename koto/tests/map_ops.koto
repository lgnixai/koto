make_foo = |x|
  x: x
  @<: |other| self.x < other.x
  @>: |other| self.x > other.x
  @==: |other| self.x == other.x

@tests =
  @test clear: ||
    m = {foo: 42, bar: 99}
    m.clear()
    assert_eq m, {}

  @test contains_key: ||
    m = {foo: 42, bar: 99}
    assert m.contains_key "foo"
    assert m.contains_key "bar"
    assert not m.contains_key "baz"

  @test extend: ||
    m = {foo: 42, bar: 99}
    m.extend ['baz', ('foo', 123)]
    assert_eq m.baz, null
    assert_eq m.foo, 123

  @test insert: ||
    m = {foo: 42}
    old_value = m.insert "foo", 99
    assert_eq m.foo, 99
    assert_eq old_value, 42

  @test insert_via_map_module: ||
    # map ops are also available in the map module,
    # which allows access to ops when a key might have a matching name.
    m = {foo: 42}
    map.insert m, "foo", -1
    assert_eq m.foo, -1

  @test insert_without_value: ||
    m = {foo: 42}
    m.insert "foo"
    assert_eq m.foo, null

  @test insert_non_string_key: ||
    m = {}
    m.insert 1, "one"
    m.insert 2, "two"
    assert_eq m.get(1), "one"
    assert_eq m.get(2), "two"

  @test is_empty: ||
    assert {}.is_empty()
    assert not {foo: 42}.is_empty()

  @test get: ||
    m = {foo: 42}
    assert_eq (m.get "foo"), 42
    assert_eq (m.get "bar"), null

    # A default value can also be provided
    assert_eq (m.get "bar", 99), 99

    # Any immutable value type can be used as a key
    m = {}
    m.insert 1, "O_o"
    assert_eq (m.get 1), "O_o"
    assert_eq (m.get "o_O"), null

  @test get_index: ||
    m = {foo: 42, bar: 99, baz: 123}
    assert_eq (m.get_index 1), ("bar", 99)
    assert_eq (m.get_index 2), ("baz", 123)
    assert_eq (m.get_index 5), null

    # A default value can also be provided
    assert_eq (m.get_index 5, ("not found", -1)), ("not found", -1)

  @test keys: ||
    m = {foo: 42}
    assert_eq m.keys().to_tuple(), ("foo",)
    m.insert 0, "zero"
    assert_eq m.keys().to_tuple(), ("foo", 0)

  @test remove: ||
    m = {foo: 42, bar: 99, baz: -1}
    assert_eq (m.remove "foo"), 42
    assert_eq m.keys().to_tuple(), ("bar", "baz")
    assert_eq (m.remove "bar"), 99
    assert_eq (m.remove "foo"), null

  @test sort: ||
    m = {foo: 42, bar: 99}
    assert_eq m.keys().to_tuple(), ("foo", "bar")

    m.sort()
    assert_eq m.keys().to_tuple(), ("bar", "foo")

    # A sort function can be optionally provided
    # which takes the key and value of a map entry,
    # and returns a value which is then used for sorting.
    m.sort |key, value| value
    assert_eq m.keys().to_tuple(), ("foo", "bar")

    m =
      foo: make_foo(27)
      bar: make_foo(42)
      baz: make_foo(-1)

    m.sort |key, value| value
    assert_eq m.keys().to_tuple(), ("baz", "foo", "bar")

  @test update: ||
    m = {foo: 42}

    # update takes a function that receives the entry's current value,
    # which is then replaced with the function's result.
    m.update "foo", |x| x * 2
    assert_eq m.foo, 84

    # update optionally takes a default value for missing entries,
    # an entry will be inserted with the default value before the function is called.
    assert not m.contains_key "xyz"
    m.update "xyz", 100, |x| x / 2
    assert_eq m.xyz, 50

  @test values: ||
    m = {foo: 42, bar: "O_o"}
    assert_eq m.values().to_tuple(), (42, "O_o")
